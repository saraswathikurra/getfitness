{"remainingRequest":"F:\\WorkSpace\\Workspace-Vue.js\\student homework\\working\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!F:\\WorkSpace\\Workspace-Vue.js\\student homework\\working\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\WorkSpace\\Workspace-Vue.js\\student homework\\working\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\WorkSpace\\Workspace-Vue.js\\student homework\\working\\client\\src\\views\\Index.vue?vue&type=template&id=23543608&scoped=true&","dependencies":[{"path":"F:\\WorkSpace\\Workspace-Vue.js\\student homework\\working\\client\\src\\views\\Index.vue","mtime":1588101675878},{"path":"F:\\WorkSpace\\Workspace-Vue.js\\student homework\\working\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\WorkSpace\\Workspace-Vue.js\\student homework\\working\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"F:\\WorkSpace\\Workspace-Vue.js\\student homework\\working\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\WorkSpace\\Workspace-Vue.js\\student homework\\working\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}