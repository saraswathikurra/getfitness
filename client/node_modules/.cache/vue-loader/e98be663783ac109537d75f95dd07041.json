{"remainingRequest":"C:\\Users\\sarsu\\Desktop\\Fit01\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\sarsu\\Desktop\\Fit01\\client\\src\\views\\Index.vue?vue&type=template&id=23543608&scoped=true&","dependencies":[{"path":"C:\\Users\\sarsu\\Desktop\\Fit01\\client\\src\\views\\Index.vue","mtime":1588197896947},{"path":"C:\\Users\\sarsu\\Desktop\\Fit01\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1588195205655},{"path":"C:\\Users\\sarsu\\Desktop\\Fit01\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1588197696136},{"path":"C:\\Users\\sarsu\\Desktop\\Fit01\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1588195205655},{"path":"C:\\Users\\sarsu\\Desktop\\Fit01\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":1588197694023}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}